//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/totem.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define DIG  2
#define SYS  3
#define QUICK_TAP_MS 175

/* Timeless homerow mods */
// https://github.com/urob/zmk-config/tree/main#timeless-homerow-mods

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // thumb cluster for both hands

// proper urob's home row, uncomment it if you are not going to use visual editor
//#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
//    ZMK_HOLD_TAP(NAME, \
//        flavor = "balanced"; \
//        tapping-term-ms = <280>; \
//        quick-tap-ms = <QUICK_TAP_MS>; \
//        require-prior-idle-ms = <150>; \
//        bindings = <HOLD>, <TAP>; \
//        hold-trigger-key-positions = <TRIGGER_POS>; \
//        hold-trigger-on-release; \
//    )
//
//MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
//MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
//MAKE_HRM(hml_layer, &mo, &kp, KEYS_R THUMBS) // switch layer like HRM

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    combos {
        compatible = "zmk,combos";

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <16 17>;
            timeout-ms = <70>;
        };

        opt_backspace {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <16 17 18>;
            timeout-ms = <70>;
        };

        shift {
            bindings = <&sk LEFT_SHIFT>;
            key-positions = <13 12>;
            timeout-ms = <100>;
        };

        to_digits_layer {
            bindings = <&to 2>;
            key-positions = <32 37>;
        };
    };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };

        press_two_keys: press_two_keys {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_tap>,
                <&kp MACRO_PLACEHOLDER>;
        };

        more_or_equal: more_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "MORE_OR_EQUAL";
        };

        less_or_equal: less_or_equal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp EQUAL>;
            label = "LESS_OR_EQUAL";
        };

        fun_arrow_right: fun_arrow_right {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp GT>;
            label = "FUN_ARROW_RIGHT";
        };

        comment: comment {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp FSLH &kp STAR>;
            label = "MACROS_COMMENT";
        };
    };

    behaviors {
        // this is homerow mod that works identical to urob's one, but this one allows visual editor to understand

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };

        comment_or: comment_or {
            compatible = "zmk,behavior-hold-tap";
            label = "slash_or_comm";
            bindings = <&comment>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        QWERTY {
            label = "Default";
            bindings = <
           &kp Q            &kp W        &kp E          &kp R              &kp T        &kp Y    &kp U               &kp I         &kp O             &kp P
           &hml LEFT_WIN A  &hml LALT S  &hml LCTRL D   &hml LEFT_SHIFT F  &kp G        &kp H    &hmr RIGHT_SHIFT J  &hmr RCTRL K  &hmr RIGHT_ALT L  &hmr RCTRL SEMICOLON
&lt 4 ESC  &kp Z            &kp X        &kp C          &kp V              &kp B        &kp N    &kp M               &kp COMMA     &kp DOT           &kp SLASH             &mt DOUBLE_QUOTES SQT
                                         &mt LCTRL DEL  &lt 1 TAB          &kp SPACE    &kp RET  &lt 2 BACKSPACE     &kp MINUS
            >;
        };

        Navigation {
            label = "Nav";
            bindings = <
        &trans  &kp LS(LG(NUMBER_3))  &kp UP_ARROW    &trans           &kp LEFT_BRACE          &kp RIGHT_BRACE        &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS
        &trans  &kp LEFT_ARROW        &kp DOWN_ARROW  &kp RIGHT_ARROW  &kp LEFT_PARENTHESIS    &kp RIGHT_PARENTHESIS  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&trans  &trans  &kp PAGE_UP           &trans          &kp PAGE_DOWN    &kp LEFT_BRACKET        &kp RIGHT_BRACKET      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kt KP_MULTIPLY  &kp CAPSLOCK
                                      &trans          &trans           &trans                  &trans                 &trans        &kp NUMBER_0
            >;
        };

        digits {
            label = "Sym";
            bindings = <
           &kp EXCLAMATION  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp STAR  &kp LEFT_PARENTHESIS  &kp EQUAL
           &trans           &trans  &trans    &trans      &trans         &trans     &trans         &trans    &trans                &kp STAR
&kp TILDE  &trans           &trans  &trans    &trans      &trans         &trans     &trans         &trans    &trans                &kp PERIOD  &kp PLUS
                                    &trans    &trans      &trans         &trans     &trans         &to 0
            >;
        };

        sim_layer {
            label = "Func";
            bindings = <
                &kp F1        &kp F2        &kp F3        &kp F4        &kp F5          &kp F6        &kp F7        &kp F8      &kp F9      &kp F10
                &trans        &trans        &trans        &kp F23       &kp F24         &kp C_MUTE    &kp C_PP      &trans      &trans      &trans
&bt BT_CLR_ALL  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &out OUT_BLE  &out OUT_USB    &kp C_VOL_DN  &kp C_VOL_UP  &kp C_PREV  &kp C_NEXT  &trans   &trans
                                            &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };

        FUN {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &to 5     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;

            label = "Fun";
        };

        GAMING {
            bindings = <
                  &kp NUMBER_5  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3    &kp NUMBER_4    &kp TAB    &kp X    &trans  &trans  &trans
                  &kp N6        &kp Q         &kp W         &kp E           &kp R           &kp T      &kp Y    &trans  &trans  &trans
&kp LEFT_CONTROL  &kp Z         &kp A         &kp S         &kp D           &kp F           &kp N      &kp M    &trans  &trans  &trans  &trans
                                              &kp G         &kp LEFT_SHIFT  &kp SPACE       &kp ENTER  &kp ESC  &to 0
            >;

            label = "Gaming";
        };

        layer_6 {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
        &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
